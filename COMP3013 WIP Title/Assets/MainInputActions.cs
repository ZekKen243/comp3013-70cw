//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MainInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ca567f21-9d36-448a-84c2-ba39ef37a4e4"",
            ""actions"": [
                {
                    ""name"": ""UseCard1"",
                    ""type"": ""Button"",
                    ""id"": ""27269f6c-fc9c-4494-b674-4fa841edced8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseCard2"",
                    ""type"": ""Button"",
                    ""id"": ""15b88e02-184f-4c5c-83d8-8229c9ce7dd2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseCard3"",
                    ""type"": ""Button"",
                    ""id"": ""e2bef550-cac2-4834-ba4a-33abcde5deb0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseCard4"",
                    ""type"": ""Button"",
                    ""id"": ""b67861f1-48c1-45f1-a9e7-97f68a4cecbe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d57e67b-7d17-4630-a9e6-f79daaddc6d3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCard1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26029ca7-8e11-493c-b9df-1b0189ba9feb"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCard2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64700ec4-38f8-4c74-9b78-25cd00152192"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCard3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4b74f8a-46da-4ea4-be84-5eb14f5fe270"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCard4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_UseCard1 = m_Player.FindAction("UseCard1", throwIfNotFound: true);
        m_Player_UseCard2 = m_Player.FindAction("UseCard2", throwIfNotFound: true);
        m_Player_UseCard3 = m_Player.FindAction("UseCard3", throwIfNotFound: true);
        m_Player_UseCard4 = m_Player.FindAction("UseCard4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_UseCard1;
    private readonly InputAction m_Player_UseCard2;
    private readonly InputAction m_Player_UseCard3;
    private readonly InputAction m_Player_UseCard4;
    public struct PlayerActions
    {
        private @MainInputActions m_Wrapper;
        public PlayerActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseCard1 => m_Wrapper.m_Player_UseCard1;
        public InputAction @UseCard2 => m_Wrapper.m_Player_UseCard2;
        public InputAction @UseCard3 => m_Wrapper.m_Player_UseCard3;
        public InputAction @UseCard4 => m_Wrapper.m_Player_UseCard4;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @UseCard1.started += instance.OnUseCard1;
            @UseCard1.performed += instance.OnUseCard1;
            @UseCard1.canceled += instance.OnUseCard1;
            @UseCard2.started += instance.OnUseCard2;
            @UseCard2.performed += instance.OnUseCard2;
            @UseCard2.canceled += instance.OnUseCard2;
            @UseCard3.started += instance.OnUseCard3;
            @UseCard3.performed += instance.OnUseCard3;
            @UseCard3.canceled += instance.OnUseCard3;
            @UseCard4.started += instance.OnUseCard4;
            @UseCard4.performed += instance.OnUseCard4;
            @UseCard4.canceled += instance.OnUseCard4;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @UseCard1.started -= instance.OnUseCard1;
            @UseCard1.performed -= instance.OnUseCard1;
            @UseCard1.canceled -= instance.OnUseCard1;
            @UseCard2.started -= instance.OnUseCard2;
            @UseCard2.performed -= instance.OnUseCard2;
            @UseCard2.canceled -= instance.OnUseCard2;
            @UseCard3.started -= instance.OnUseCard3;
            @UseCard3.performed -= instance.OnUseCard3;
            @UseCard3.canceled -= instance.OnUseCard3;
            @UseCard4.started -= instance.OnUseCard4;
            @UseCard4.performed -= instance.OnUseCard4;
            @UseCard4.canceled -= instance.OnUseCard4;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnUseCard1(InputAction.CallbackContext context);
        void OnUseCard2(InputAction.CallbackContext context);
        void OnUseCard3(InputAction.CallbackContext context);
        void OnUseCard4(InputAction.CallbackContext context);
    }
}
